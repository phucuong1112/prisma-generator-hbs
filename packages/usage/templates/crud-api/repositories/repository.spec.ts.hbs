import { Test, TestingModule } from '@nestjs/testing';
import { {{modelClassName}}Repository } from './{{modelClassName}}.repository';
import { PrismaService } from '@/database/prisma.service';
import { Search{{modelClassName}}Dto } from '../dto/{{moduleName}}.schema';

describe('{{modelClassName}}Repository', () => {
  let repository: {{modelClassName}}Repository;
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  let prismaService: PrismaService;

  const mock{{modelClassName}} = {
    id: 'test-id',
    {{#each modelInfo.fields}}
    {{#unless (or (eq this.name "id") (eq this.name "createdAt") (eq this.name "updatedAt") (eq this.name "deletedAt") (eq this.name "createdBy") (eq this.name "updatedBy") (eq this.kind "object"))}}
    {{this.name}}: {{#if (eq this.type "String")}}'test-{{this.name}}'{{else if (eq this.type "Int")}}1{{else if (eq this.type "Boolean")}}true{{else if (eq this.type "DateTime")}}new Date('2023-01-01T00:00:00.000Z'){{else}}'test-value'{{/if}},
    {{/unless}}
    {{/each}}
    createdAt: new Date(),
    updatedAt: new Date(),
  };

  const mockPrismaService = {
    {{modelVarName}}: {
      findMany: jest.fn().mockResolvedValue([mock{{modelClassName}}]),
      findUnique: jest.fn().mockResolvedValue(mock{{modelClassName}}),
      create: jest.fn().mockResolvedValue(mock{{modelClassName}}),
      update: jest.fn().mockResolvedValue(mock{{modelClassName}}),
      delete: jest.fn().mockResolvedValue(mock{{modelClassName}}),
      count: jest.fn().mockResolvedValue(1),
    },
  };

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [
        {{modelClassName}}Repository,
        { provide: PrismaService, useValue: mockPrismaService },
      ],
    }).compile();

    repository = module.get<{{modelClassName}}Repository>({{modelClassName}}Repository);
    prismaService = module.get<PrismaService>(PrismaService);
  });

  it('should be defined', () => {
    expect(repository).toBeDefined();
  });

  describe('findAll', () => {
    it('should return paginated results', async () => {
      const searchParams: Search{{modelClassName}}Dto = { offset: 0, limit: 10 };
      const expected = { items: [mock{{modelClassName}}], total: 1 };
      
      const result = await repository.findAll(searchParams);
      
      expect(result).toEqual(expected);
      expect(mockPrismaService.{{modelVarName}}.findMany).toHaveBeenCalledWith({
        where: {},
        skip: 0,
        take: 10,
        orderBy: undefined,
        select: {
          id: true,
          {{#each modelInfo.fields}}
          {{#unless (or (eq this.name "id") (eq this.kind "object"))}}
          {{this.name}}: true,
          {{/unless}}
          {{/each}}
        },
      });
      expect(mockPrismaService.{{modelVarName}}.count).toHaveBeenCalledWith({
        where: {},
      });
    });

    {{#each modelInfo.fields}}
    {{#if (and 
      (eq this.kind "scalar") 
      (not (includes "id,createdAt,updatedAt,deletedAt,createdBy,updatedBy" this.name))
      (or 
        (and (eq this.type "String") (or this.isUnique (includes "name,title,slug,email,username,code,reference,description" this.name)))
        (includes "status,type,category" this.name)
        (eq this.type "Boolean")
        (and (eq this.type "DateTime") (not (includes "createdAt,updatedAt,deletedAt" this.name)))
      )
    )}}
    it('should filter by {{this.name}}', async () => {
      const searchParams: Search{{../modelClassName}}Dto = { 
        offset: 0, 
        limit: 10,
        {{this.name}}: {{#if (eq this.type "String")}}'filter-value'{{else if (eq this.type "Int")}}1{{else if (eq this.type "Boolean")}}true{{else if (eq this.type "DateTime")}}new Date('2023-01-01T00:00:00.000Z'){{else}}'filter-value'{{/if}}
      };
      
      await repository.findAll(searchParams);
      
      expect(mockPrismaService.{{../modelVarName}}.findMany).toHaveBeenCalledWith(
        expect.objectContaining({
          where: {
            {{this.name}}: {{#if (eq this.type "String")}}{"contains": "filter-value", "mode": "insensitive"}{{else if (eq this.type "Int")}}1{{else if (eq this.type "Boolean")}}true{{else if (eq this.type "DateTime")}}new Date('2023-01-01T00:00:00.000Z'){{else}}'filter-value'{{/if}}
          },
          select: {
            id: true,
            {{#each ../modelInfo.fields}}
            {{#unless (or (eq this.name "id") (eq this.kind "object"))}}
            {{this.name}}: true,
            {{/unless}}
            {{/each}}
          },
        })
      );
    });
    {{/if}}
    {{/each}}
  });

  describe('findOne', () => {
    it('should find a {{modelVarName}} by id', async () => {
      const id = 'test-id';
      
      const result = await repository.findOne(id);
      
      expect(result).toEqual(mock{{modelClassName}});
      expect(mockPrismaService.{{modelVarName}}.findUnique).toHaveBeenCalledWith({
        where: { id },
        select: {
          id: true,
          {{#each modelInfo.fields}}
          {{#unless (or (eq this.name "id") (eq this.kind "object"))}}
          {{this.name}}: true,
          {{/unless}}
          {{/each}}
        },
      });
    });
  });

  {{#each modelInfo.fields}}
  {{#if this.isUnique}}
  describe('findBy{{toPascal this.name}}', () => {
    it('should find a {{../modelVarName}} by {{this.name}}', async () => {
      const {{this.name}} = {{#if (eq this.type "String")}}'test-{{this.name}}'{{else if (eq this.type "Int")}}1{{else if (eq this.type "Boolean")}}true{{else if (eq this.type "DateTime")}}new Date('2023-01-01T00:00:00.000Z'){{else}}'test-value'{{/if}};
      
      const result = await repository.findBy{{toPascal this.name}}({{this.name}});
      
      expect(result).toEqual(mock{{../modelClassName}});
      expect(mockPrismaService.{{../modelVarName}}.findUnique).toHaveBeenCalledWith({
        where: { {{this.name}} },
      });
    });
  });
  {{/if}}
  {{/each}}

  describe('create', () => {
    it('should create a {{modelVarName}}', async () => {
      const createData = {
        {{#each modelInfo.fields}}
        {{#unless (or (eq this.name "id") (eq this.name "createdAt") (eq this.name "updatedAt") (eq this.name "deletedAt") (eq this.name "createdBy") (eq this.name "updatedBy") (eq this.kind "object"))}}
        {{#if this.isRequired}}
        {{this.name}}: {{#if (eq this.type "String")}}'test-{{this.name}}'{{else if (eq this.type "Int")}}1{{else if (eq this.type "Boolean")}}true{{else if (eq this.type "DateTime")}}new Date('2023-01-01T00:00:00.000Z'){{else}}'test-value'{{/if}},
        {{/if}}
        {{/unless}}
        {{/each}}
      };
      
      const result = await repository.create(createData);
      
      expect(result).toEqual(mock{{modelClassName}});
      expect(mockPrismaService.{{modelVarName}}.create).toHaveBeenCalledWith({
        data: createData,
        select: {
          id: true,
          {{#each modelInfo.fields}}
          {{#unless (or (eq this.name "id") (eq this.kind "object"))}}
          {{this.name}}: true,
          {{/unless}}
          {{/each}}
        },
      });
    });
  });

  describe('update', () => {
    it('should update a {{modelVarName}}', async () => {
      const id = 'test-id';
      const updateData = {
        {{#each modelInfo.fields}}
        {{#unless (or (eq this.name "id") (eq this.kind "object"))}}
        {{this.name}}: {{#if (eq this.type "String")}}'updated-{{this.name}}'{{else if (eq this.type "Int")}}2{{else if (eq this.type "Boolean")}}false{{else if (eq this.type "DateTime")}}new Date('2023-02-01T00:00:00.000Z'){{else}}'updated-value'{{/if}},
        {{/unless}}
        {{/each}}
      };
      
      const result = await repository.update(id, updateData);
      
      expect(result).toEqual(mock{{modelClassName}});
      expect(mockPrismaService.{{modelVarName}}.update).toHaveBeenCalledWith({
        where: { id },
        data: updateData,
        select: {
          id: true,
          {{#each modelInfo.fields}}
          {{#unless (or (eq this.name "id") (eq this.kind "object"))}}
          {{this.name}}: true,
          {{/unless}}
          {{/each}}
        },
      });
    });
  });

  describe('delete', () => {
    it('should delete a {{modelVarName}}', async () => {
      const id = 'test-id';
      
      const result = await repository.delete(id);
      
      expect(result).toEqual(mock{{modelClassName}});
      expect(mockPrismaService.{{modelVarName}}.delete).toHaveBeenCalledWith({
        where: { id },
      });
    });
  });
});
